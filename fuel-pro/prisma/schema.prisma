generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   refresh_token_expires_in Int?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   firstname          String?
//   lastname      String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// schema.prisma

// User table
// schema.prisma

// User table

model User {
  id       String    @id @default(uuid())
  username String    @unique
  password String
  profile  Profile?
  sessions Session[]
  quotes   Quote[]
}

model Profile {
  clientUsername String  @id
  firstName       String?
  lastName       String?
  // email          String  @unique
  address1       String?
  address2       String?
  city           String?
  state          String?
  zipcode        String?

  userClient     User    @relation(fields: [clientUsername], references: [username])
}

model Quote {
  id             String   @id @default(uuid())
  clientUsername String   
  date           DateTime? @default(now())
  gallons        Int?
  price          Float?
  due            Float?
  address        String
  city           String
  state          String
  zipcode        String
  userCl           User     @relation(fields: [clientUsername], references: [username])
}

model Session {
  token String @id @unique
  user  User   @relation(fields: [token], references: [username])
}
